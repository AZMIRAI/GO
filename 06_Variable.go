package main

import "fmt"

func main()  {

	// ******************************
	// ********** 変 数 *************
	// ******************************

	var x string = "キチン食べたいな～";
		// いったんvarで変数を宣言して、xという変数名を入力してstringというタイプを指定する。
		// 最後に""に自分が望む変数名を入力する。

	fmt.Println(x);
		// 変数xを出力する。

	var y string;
		// 変数を宣言して、タイプ(文字列)を指定する。

	y = "いや！、チキンは別に食べたくないけど。ピザはどう？";
		// 変数に文字列を入れる。

	fmt.Println(y);
		// 変数yを出力する。
	var a string;
		// 変数をaに宣言後、文字列タイプを指定する。

	a = "ファースト";
		// 変数aにフードを差し込む。

	fmt.Println(a);
		// 変数aを出力する。

	a = "セコンド";
		// 変数aにセコンドを入れる。

	fmt.Println(a);
		// 変数aを出力する。

	var b string;
		// 変数bを文字列タイプで指定する。

	b = "ファースト";
		// 変数bにフードを差し込む。

	fmt.Println(b);
		// 変数bを出力する。

	b = b + "セコンド";
		// 変数bにセコンドを追加(+演算子)。
		// b + = "セコンド"と同じ。

	fmt.Println(b);
		// 変数bを出力する。

	var c string = "ハロー";
		// 変数cに文字列タイプで指定後、ハロを入れる。

	var d string = "ワルド";
		// 変数dに文字列タイプで指定後、ワルドを入れる。

	fmt.Println( c == d );
		// 変数cとdが同じか判別した後なら、true違えばfalse値を返します。
		// 上記の状況では変数cと変数dは内容が異なるため、false値を返す。

	e := "ハローワルド";
		// 縮約型コードだ。ここで分かる。 golangは、あえてタイプ型を指定しなくても。
		// 自動的にコンパイラがタイプを推論できるため、タイプは必要ない。
		// var e string = "ハローワルド" と同じコードだ。

	fmt.Println(e);
		// 変数eを出力する。

	var f = "ハローワルド";
		// 上記の通り、自動的にコンパイラがタイプを推論してくれるのでタイプを宣言しなくてもよい。

	fmt.Println(f);
		// 変数fを出力する。

	g := 5;
		// 変数gを宣言して、数字の5を入れる。

	fmt.Println(g);
		// 変数gを出力する。

	// 変数名の作り方。
	// 変数の名前を適切に指定することは, 開発にとって極めて重要な部分だ。

	// ★ 名前は必ず文字で始めなきゃ。
	// ★ 文字や数字、または_記号を含むことができる。
	// ★ 例えば、犬の名前を宣言する時、xとむやみに宣言しないで、dogNameと指定した方が良い。

	// ラクダ表記法:最初の単語の頭文字を小文字で書き、次からの単語は最初の文字だけ大文字で書く。

	// 変数の有効範囲は関数内で宣言したならば、その関数でのみ使用可能であり、他の関数で呼び出すと失敗する。

	const h string = "これは変えられへん";
		// 定数hを文字列で宣言後、これは変えられへんを入力する。

	fmt.Println(h);
		// 定数hを出力する。

	var (
		i = 6
		j = 8
		k = 10
	);
		// 変数も一回に複数宣言できる。
		// 変数 iに6、変数 jに8、変数 kに10。

	fmt.Println(i+j+k);
		// 変数i,j,kを足す。

}
